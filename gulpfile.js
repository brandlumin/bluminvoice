/* VARIABLES SETUP - plugins */
const { dest, gulp, parallel, series, src, lastRun, watch } = require("gulp"),
  babel = require("gulp-babel"),
  concat = require("gulp-concat"),
  htmlmin = require("gulp-htmlmin"),
  livereload = require("gulp-livereload"),
  postcss = require("gulp-postcss"),
  prefix = require("autoprefixer"),
  sass = require("gulp-sass"),
  sourcemaps = require("gulp-sourcemaps"),
  stripCSS = require("gulp-strip-css-comments"),
  terser = require("gulp-terser"),
  /* VARIABLES SETUP - plugins options */
  terserOptionsDev = {
    format: {
      beautify: true, // (default false)
      comments: true, // (default "some")
      // comments: "/^!/ OR /^[!*]/",
      indent_level: 2, // (default 4)
      ecma: 2016, // (default 5)
      quote_style: 0 // (default 0): prefers double quotes
    },
    ecma: 2016, // (default undefined) - pass 5, 2015, 2016, etc to override compress and format's ecma options.
    keep_fnames: true, // (default: false) - pass true to prevent discarding or mangling of function names.
    mangle: true, //  (default true) — pass false to skip mangling names
    toplevel: false, // (default false) - set to true if you wish to enable top level variable and function name mangling and to drop unused variables and functions.
    warnings: "verbose",
  }, // https://github.com/terser/terser#minify-options
  sassOptionsDev = {
    errLogToConsole: true,
    precision: 10,
    sourceComments: true, // true,
    outputStyle: "expanded",
  },
  terserOptionsProd = {
    format: {
      beautify: false, // (default false)
      comments: false, // (default "some")
      indent_level: 2, // (default 4)
      ecma: 2016, // (default 5)
      quote_style: 0 // (default 0): prefers double quotes
    },
    ecma: 2016, // (default undefined) - pass 5, 2015, 2016, etc to override compress and format's ecma options.
    keep_fnames: false, // (default: false) - pass true to prevent discarding or mangling of function names.
    mangle: true, //  (default true) — pass false to skip mangling names
    toplevel: true, // (default false) - set to true if you wish to enable top level variable and function name mangling and to drop unused variables and functions.
    warnings: "verbose",
  }, // https://github.com/terser/terser#minify-options
  sassOptionsProd = {
    errLogToConsole: true,
    precision: 10,
    sourceComments: false,
    outputStyle: "compressed",
  },
  htmlminOptions = {
    html5: true,
    ignoreCustomFragments: [/(<%.*%>)/, /<\?[=|php]?[\s\S]*?\?>/, /<\?[\s\S]*?\?>/],
    removeComments: true,
    includeAutoGeneratedTags: true,
    minifyCSS: true,
    minifyJS: true
  },
  postcssOptions = [prefix({ grid: true })],
  /* VARIABLES SETUP - files */
  bootstrapFiles = "source/scss/bootstrap/**/*",
  blStyleFiles = "source/scss/brandlumin/**/*",
  jsPluginFiles = [
    "source/js/jquery*.min.js",
    "source/js/popper.min.js",
    "source/js/bootstrap.min.js",
  ],
  blScriptFiles = "source/js/bl*.js*",
  frontEndFiles = ["*.htm*", "*.php"];


/* FUNCTION DEFINITIONS */
function preloadJS() {
  return src(jsPluginFiles, { allowEmpty: true })
    .pipe(sourcemaps.init())
    .pipe(concat("preload.min.js", { newLine: ";" }))
    .pipe(sourcemaps.write('.'))
    .pipe(dest("site/scripts/"));
}


function workScriptsDev() {
  return src(blScriptFiles, { allowEmpty: true })
    .pipe(sourcemaps.init())
    .pipe(concat("script6es.min.js", { newLine: ";" }))
    .pipe(terser(terserOptionsDev))
    .pipe(sourcemaps.write())
    .pipe(dest("site/scripts/"))
    .pipe(livereload());
}


function workScriptsProd() {
  return src(blScriptFiles, { allowEmpty: true })
    .pipe(sourcemaps.init())
    .pipe(concat("script6es.min.js", { newLine: ";" }))
    .pipe(terser(terserOptionsProd))
    .pipe(sourcemaps.write('.'))
    .pipe(dest("site/scripts/"))
    .pipe(livereload());
}


function bootstrapCSS() {
  return src("source/scss/bootstrap/bootstrap.scss", { allowEmpty: true })
    .pipe(sourcemaps.init())
    .pipe(sass.sync(sassOptionsProd).on("error", sass.logError))
    .pipe(postcss([prefix()]))
    .pipe(stripCSS())
    .pipe(sourcemaps.write('.'))
    .pipe(dest("site/styles/"))
    .pipe(livereload());
}


function workStylesDev() {
  return src("source/scss/brandlumin/bluminvoice.sass", { allowEmpty: true })
    .pipe(sourcemaps.init())
    .pipe(sass.sync(sassOptionsDev).on("error", sass.logError))
    .pipe(postcss([prefix()])) /*.pipe(stripCSS())*/
    .pipe(sourcemaps.write('.'))
    .pipe(dest("site/styles/").on("finish", (callback) => livereload.reload()));
}


function workStylesProd() {
  return src("source/scss/brandlumin/bluminvoice.sass", { allowEmpty: true })
    .pipe(sourcemaps.init())
    .pipe(sass.sync(sassOptionsProd).on("error", sass.logError))
    .pipe(postcss([prefix()]))
    .pipe(stripCSS())
    .pipe(sourcemaps.write('.'))
    .pipe(dest("site/styles/").on("finish", (callback) => livereload.reload()));
}


function workMinifyFrontEnd() {
  return src(frontEndFiles, { allowEmpty: true, since: lastRun(workMinifyFrontEnd) })
    .pipe(htmlmin(htmlminOptions))
    .pipe(dest("site/").on("finish", (callback) => livereload.reload()));
}


/* WATCH FUNCTION */
function watchFiles() {
  watch(bootstrapFiles, bootstrapCSS);
  watch(blStyleFiles, workStylesDev);
  // watch(jsPluginFiles, preloadJS);
  watch(blScriptFiles, workScriptsDev);
  watch(frontEndFiles, workMinifyFrontEnd);
  console.log(">> Begun watching for changes...");
}


/* SERVER SETUP FUNCTION */
function setupServer() {
  livereload.listen(function () {
    console.log(">> The server has been established...");
    setTimeout(function () {
      console.log(">> ...let's begin development...");
    }, 600);
  });
}


/* FINAL EXPORTS */
exports.default = series(
  bootstrapCSS,
  preloadJS,
  workStylesDev,
  workScriptsDev,
  workMinifyFrontEnd,
  parallel(setupServer, watchFiles)
);
exports.stylesProd = series(bootstrapCSS, workStylesProd);
exports.scriptsProd = series(preloadJS, workScriptsProd);
exports.stylesDev = series(bootstrapCSS, workStylesDev);
exports.scriptsDev = series(preloadJS, workScriptsDev);
exports.Minifyfrontend = workMinifyFrontEnd;